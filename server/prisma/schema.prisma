datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgrespassword@pg/prisma?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @default(cuid()) @id
  email         String         @unique
  password      String
  posts         Post[]
  postVotes     PostVote[]
  postLikes     PostLike[]
  comments      Comment[]
  commentLikes  CommentLike[]
  // polls         Poll[]
  // eventFollows  EventFollow[]
  // tickerFollows TickerFollow[]
  follows       Follow[]
  commits       Commit[]
  commitReviews CommitReview[]
  profile       Profile
  dailyProfile  DailyProfile
  bets          Bet[]
}

model Profile {
  id        Int    @default(autoincrement()) @id
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  level     Int    @default(0)
  exp       Int    @default(0)
  nGotLikes Int    @default(0)
  nCommits  Int    @default(0)
}

model DailyProfile {
  id             Int      @default(autoincrement()) @id
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  nLikes         Int      @default(0)
  nFeeds         Int      @default(0)
  nEventFollows  Int      @default(0)
  nTickerFollows Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// 透過URL可以判斷是否為link
// polls     Poll[]
// event     Event?   @relation(references: [id])
// ticker    Ticker?  @relation(references: [id])
// tag       Tag?     @relation(references: [id])
// likes     Like[]
// tags      Tag[]         @relation(references: [id])
// events    Event[]       @relation(references: [id])
// tickers   Ticker[]      @relation(references: [id])
model Post {
  id        Int        @default(autoincrement()) @id
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  view      View       @default(PUBLIC)
  title     String
  content   String
  count     PostCount
  commments Comment[]
  likes     PostLike[]
  votes     PostVote[]
  symbols   Symbol[]   @relation(references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model PostLike {
  // id        Int      @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  choice    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, postId])
}

model PostVote {
  // id        Int      @default(autoincrement()) @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  choice    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, postId])
}

model PostCount {
  id        Int      @default(autoincrement()) @id
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  nViews    Int      @default(0)
  nUps      Int      @default(0)
  nDowns    Int      @default(0)
  nComments Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// commit    Commit?  @relation(fields: [commitId], references: [id])
// commitId  Int?
model Comment {
  id        Int           @default(autoincrement()) @id
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  post      Post          @relation(fields: [postId], references: [id])
  postId    Int
  // state     State         @default(PUBLIC)
  view      View          @default(PUBLIC)
  content   String
  count     CommentCount
  likes     CommentLike[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CommentLike {
  // id        Int      @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  choice    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, commentId])
}

model CommentCount {
  id         Int      @default(autoincrement()) @id
  comment    Comment  @relation(fields: [commentId], references: [id])
  commentId  Int
  nViews     Int      @default(0)
  nVoteUps   Int      @default(0)
  nVoteDowns Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// event     Event?     @relation(references: [id])
// likes     Like[]
// model Poll {
// id        Int        @default(autoincrement()) @id
// user      User       @relation(fields: [userId], references: [id])
// userId    String
// post      Post?      @relation(fields: [postId], references: [id])
// postId    Int?
// header    String
// body      String?
// choices   String[]
// state     State      @default(PUBLIC)
// createdAt DateTime   @default(now())
// closedAt  DateTime   @default(now())
// pollVotes PollVote[]
// }
// model Event {
// id           Int           @default(autoincrement()) @id
// header       String
// tags         Tag[]         @relation(references: [id])
// // 包含event-trend(用ticker表示)
// tickers      Ticker[]      @relation(references: [id])
// // parent       Event?        @relation("parent", references: [id])
// // children     Event[]       @relation("children")
// posts        Post[]
// // polls        Poll[]
// // similarTo [Event!]!
// createdAt    DateTime
// updatedAt    DateTime
// // events       Event[]       @relation("parent")
// // event        Event?        @relation("children", references: [id])
// eventFollows EventFollow[]
// commits      Commit[]
// symbolId     Int?
// symbolId     Int?
// }
model Symbol {
  id             Int       @default(autoincrement()) @id
  cat            SymbolCat
  slug           String    @unique
  valid          Boolean
  title          String
  content        String
  privateContent String
  posts          Post[]    @relation(references: [id])
  commits        Commit[]
  ticks          Tick[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// model Ticker {
// id            Int            @default(autoincrement()) @id
// name          String         @unique
// body          String
// valid         Boolean
// posts         Post[]         @relation(references: [id])
// events        Event[]        @relation(references: [id])
// createdAt     DateTime       @default(now())
// updatedAt     DateTime       @updatedAt
// tickerFollows TickerFollow[]
// commits       Commit[]
// ticks         Tick[]
// }
// // 包含題材股
// // 包含ticker？ -> 基本面、同類股族群、連結金融商品（選擇權等） -> 可用body表示？
// // 屬性tag：新聞、分析、世界線、
// model Tag {
// id        Int      @default(autoincrement()) @id
// name      String   @unique
// body      String
// valid     Boolean
// posts     Post[]   @relation(references: [id])
// event     Event[]  @relation(references: [id])
// // commits   Commit[]
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt
// }
model Follow {
  id        Int      @default(autoincrement()) @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  symbol    Symbol   @relation(fields: [symbolId], references: [id])
  symbolId  Int
  // event      Event    @relation(fields: [eventId], references: [id])
  // eventId    Int
  followed  Boolean
  createdAt DateTime
  updatedAt DateTime
}

// model TickerFollow {
// id         Int      @default(autoincrement()) @id
// user       User     @relation(fields: [userId], references: [id])
// userId     String
// ticker     Ticker   @relation(fields: [tickerId], references: [id])
// tickerId   Int
// isFollowed Boolean
// createdAt  DateTime
// updatedAt  DateTime
// }
model Commit {
  id        Int            @default(autoincrement()) @id
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  symbol    Symbol         @relation(fields: [symbolId], references: [id])
  symbolId  Int
  post      Post           @relation(fields: [postId], references: [id])
  postId    Int
  action    CommitAction
  diff      String
  reviews   CommitReview[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model CommitReview {
  id        Int      @default(autoincrement()) @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  commit    Commit   @relation(fields: [commitId], references: [id])
  commitId  Int
  choice    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tick {
  id       Int      @default(autoincrement()) @id
  // ticker   Ticker   @relation(fields: [tickerId], references: [id])
  // tickerId Int
  symbol   Symbol   @relation(fields: [symbolId], references: [id])
  symbolId Int
  value    Float
  at       DateTime
}

model Bet {
  id        Int      @default(autoincrement()) @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  // ticker    Ticker   @relation(fields: [tickerId], references: [id])
  // tickerId  Int
  symbol    Symbol   @relation(fields: [symbolId], references: [id])
  symbolId  Int
  content   String
  result    String?
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum View {
  PUBLIC
  DELETED
  REPORTED
  LOCKED
}

enum PostCat {
  LINK
  POST
  POLL
  COMMIT
}

enum LikeChoice {
  UP
  DOWN
  NEUTRAL
}

enum SymbolCat {
  TAG
  TICKER
  EVENT
}

enum CommitAction {
  CREATE
  UPDATE
  DELETE
  MERGE
}