datasource db {
  provider = "postgresql"
  url      = "postgresql://sqlpad:sqlpad@db/mydb?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @default(cuid()) @id
  email         String         @unique
  password      String
  feeds         Feed[]
  comments      Comment[]
  posts         Post[]
  polls         Poll[]
  pollVotes     PollVote[]
  eventFollows  EventFollow[]
  tickerFollows TickerFollow[]
  commits       Commit[]
  commitReviews CommitReview[]
  likes         Like[]
  profile       Profile
  dailyProfile  DailyProfile
}

model Profile {
  id        Int  @default(autoincrement()) @id
  user      User @relation(references: [id])
  level     Int  @default(0)
  exp       Int  @default(0)
  nGotLikes Int  @default(0)
  nCommits  Int  @default(0)
}

model DailyProfile {
  id             Int      @default(autoincrement()) @id
  user           User     @relation(references: [id])
  nLikes         Int      @default(0)
  // nFeeds         Int      @default(0)
  nEventFollows  Int      @default(0)
  nTickerFollows Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Feed {
  id        Int       @default(autoincrement()) @id
  user      User      @relation(references: [id])
  header    String
  post      Post?     @relation(references: [id])
  // webpage   Webpage?
  // event    Event?
  tags      Tag[]     @relation(references: [id])
  commments Comment[]
  // tickers  Ticker[]
  // comments Comment[]
  // feedType FeedType
  stats     FeedStats @relation(references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  ticker    Ticker?   @relation(references: [id])
  likes     Like[]
}

// 透過URL可以判斷是否為link
model Post {
  id        Int      @default(autoincrement()) @id
  user      User     @relation(references: [id])
  feed      Feed
  url       String?
  header    String
  body      String
  state     State    @default(PUBLIC)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  polls     Poll[]
  event     Event?   @relation(references: [id])
  ticker    Ticker?  @relation(references: [id])
  tag       Tag?     @relation(references: [id])
  likes     Like[]
}

model Comment {
  id        Int      @default(autoincrement()) @id
  user      User     @relation(references: [id])
  body      String
  state     State    @default(PUBLIC)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  feed      Feed?    @relation(references: [id])
  commit    Commit?  @relation(references: [id])
  likes     Like[]
}

model Poll {
  id        Int        @default(autoincrement()) @id
  user      User       @relation(references: [id])
  post      Post?      @relation(references: [id])
  header    String
  body      String?
  choices   String[]
  state     State      @default(PUBLIC)
  createdAt DateTime   @default(now())
  closedAt  DateTime   @default(now())
  pollVotes PollVote[]
  event     Event?     @relation(references: [id])
  likes     Like[]
}

model PollVote {
  id        Int      @default(autoincrement()) @id
  // post   Post
  user      User     @relation(references: [id])
  poll      Poll     @relation(references: [id])
  choice    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id           Int           @default(autoincrement()) @id
  header       String
  tags         Tag[]
  // 包含event-trend(用ticker表示)
  tickers      Ticker[]      @relation(references: [id])
  parent       Event?        @relation("parent", references: [id])
  children     Event[]       @relation("children")
  posts        Post[]
  polls        Poll[]
  // similarTo [Event!]!
  createdAt    DateTime
  updatedAt    DateTime
  events       Event[]       @relation("parent")
  event        Event?        @relation("children", references: [id])
  eventFollows EventFollow[]
  commits      Commit[]
}

model Ticker {
  id            Int            @default(autoincrement()) @id
  name          String         @unique
  body          String
  valid         Boolean
  feeds         Feed[]
  posts         Post[]
  events        Event[]        @relation(references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tickerFollows TickerFollow[]
  commits       Commit[]
  ticks         Tick[]
}

// 包含題材股
// 包含ticker？ -> 基本面、同類股族群、連結金融商品（選擇權等） -> 可用body表示？
// 屬性tag：新聞、分析、世界線、
model Tag {
  id        Int      @default(autoincrement()) @id
  name      String   @unique
  body      String
  valid     Boolean
  posts     Post[]
  feeds     Feed[]   @relation(references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event?   @relation(references: [id])
  commits   Commit[]
}

model EventFollow {
  id         Int      @default(autoincrement()) @id
  user       User     @relation(references: [id])
  event      Event    @relation(references: [id])
  isFollowed Boolean
  createdAt  DateTime
  updatedAt  DateTime
}

model TickerFollow {
  id         Int      @default(autoincrement()) @id
  user       User     @relation(references: [id])
  ticker     Ticker   @relation(references: [id])
  isFollowed Boolean
  createdAt  DateTime
  updatedAt  DateTime
}

model Commit {
  id            Int            @default(autoincrement()) @id
  user          User           @relation(references: [id])
  event         Event?         @relation(references: [id])
  ticker        Ticker?        @relation(references: [id])
  tag           Tag?           @relation(references: [id])
  action        CommitAction
  description   String
  diff          String
  comments      Comment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  commitReviews CommitReview[]
}

model CommitReview {
  id        Int      @default(autoincrement()) @id
  user      User     @relation(references: [id])
  commit    Commit   @relation(references: [id])
  choice    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tick {
  id     Int      @default(autoincrement()) @id
  ticker Ticker   @relation(references: [id])
  value  Float
  at     DateTime
}

model Like {
  id        Int      @default(autoincrement()) @id
  user      User     @relation(references: [id])
  feed      Feed?    @relation(references: [id])
  post      Post?    @relation(references: [id])
  poll      Poll?    @relation(references: [id])
  comment   Comment? @relation(references: [id])
  choice    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeedStats {
  id         Int      @default(autoincrement()) @id
  feed       Feed
  nViews     Int      @default(0)
  nVoteUps   Int      @default(0)
  nVoteDowns Int      @default(0)
  nComments  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum CommitAction {
  CREATE
  UPDATE
  DELETE
  MERGE
}

enum State {
  PUBLIC
  DELETED
  REPORTED
}